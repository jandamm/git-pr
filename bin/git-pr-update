#!/usr/bin/env zsh

set -euo pipefail

zparseopts -D -E -stash=stash

function error() {
    printf "%s\n" "$2" >&2
    exit "$1"
}

if [[ -z $1 ]]; then
    git-pr_help git-pr-update
    exit 0
fi

git-pr_stash save $stash

readonly default_branch="$(git-pr_default_branch)"
readonly pr_commit="$1"

readonly branch_name="$(git-pr_branch_name "$pr_commit")"

git switch "$branch_name"

# Cherrypick the latest commit to the PR branch.
if ! git cherry-pick "$default_branch"; then
    git cherry-pick --abort
    git switch "$default_branch"
    git-pr_stash pop
    printf '\033[0;31mCould not cherry-pick commit. There is probably a dependency to a previous commit.\n'
    exit 1
fi

# Push the updated branch.
git -c push.default=current push

# Go back to default_branch.
git switch "$default_branch"

# This allows for scripted (non-interactive) use of interactive rebase.
export GIT_SEQUENCE_EDITOR=/usr/bin/true

# In two steps, squash the latest commit into its PR commit.
# 1. Mark the commit as a fixup
git commit --amend --fixup="$pr_commit"
# 2. Use the autosquash feature of interactive rebase to perform the squash.
git rebase --interactive --autosquash "${pr_commit}^"

git-pr_stash pop
